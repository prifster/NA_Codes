function body = read_input_file(body,inp_fname)

% Your code here to compute npan and pan
%----------------------------------------------------------------
a = fopen(inp_fname);
fgetl(a);
fgetl(a);
fgetl(a);

npan = sscanf(fgetl(a), '%f');
pan = zeros(3,4,npan);
for i = 1:npan
    for j = 1:4
        pan(:,j,i) = sscanf(fgetl(a), '%f %f %f');
    end
    
end



fclose('all');
%----------------------------------------------------------------

% Update the output structure

body.npan = npan;
body.pan = pan;

function body = calc_grid_properties(body)

% Required inputs

npan = body.npan;
pan = body.pan;

% Your code here to compute centroids, normals and areas of each panel
%----------------------------------------------------------------

for i = 1:npan

d1=sqrt( (pan(1,1,i)-pan(1,2,i))^2 + (pan(2,1,i)-pan(2,2,i))^2 + (pan(3,1,i)-pan(3,2,i))^2);
d2=sqrt( (pan(1,2,i)-pan(1,3,i))^2 + (pan(2,2,i)-pan(2,3,i))^2 + (pan(3,3,i)-pan(3,2,i))^2);
d3=sqrt( (pan(1,4,i)-pan(1,3,i))^2 + (pan(2,3,i)-pan(2,4,i))^2 + (pan(3,3,i)-pan(3,4,i))^2);
d4=sqrt( (pan(1,1,i)-pan(1,4,i))^2 + (pan(2,1,i)-pan(2,4,i))^2 + (pan(3,1,i)-pan(3,4,i))^2);

d = [d1 d2 d3 d4];
cx1=(pan(1,1,i)+pan(1,2,i))/2;
cx2=(pan(1,3,i)+pan(1,2,i))/2;
cx3=(pan(1,3,i)+pan(1,4,i))/2;
cx4=(pan(1,1,i)+pan(1,4,i))/2;
cy1=(pan(2,1,i)+pan(2,2,i))/2;
cy2=(pan(2,3,i)+pan(2,2,i))/2;
cy3=(pan(2,3,i)+pan(2,4,i))/2;
cy4=(pan(2,1,i)+pan(2,4,i))/2;
cz1=(pan(3,1,i)+pan(3,2,i))/2;
cz2=(pan(3,3,i)+pan(3,2,i))/2;
cz3=(pan(3,3,i)+pan(3,4,i))/2;
cz4=(pan(3,1,i)+pan(3,4,i))/2;
tcx = [cx1 cx2 cx3 cx4];
tcy = [cy1 cy2 cy3 cy4];
tcz = [cz1 cz2 cz3 cz4];
cx = sum(tcx.*d)/sum(d);
cy = sum(tcy.*d)/sum(d);
cz = sum(tcz.*d)/sum(d);
cen(i,:) = [cx cy cz];
dg1=[pan(1,3,i)-pan(1,1,i) pan(2,3,i)-pan(2,1,i) pan(3,3,i)-pan(3,1,i)];
dg2=[pan(1,4,i)-pan(1,2,i) pan(2,4,i)-pan(2,2,i) pan(3,4,i)-pan(3,2,i)];
nl = cross(dg1,dg2);
dnl = sqrt( (nl(1)^2) + (nl(2)^2) + (nl(3)^2) );
n(i,:) = nl/dnl;
ar(i)= dnl/2;
area = ar';
end



%----------------------------------------------------------------

% Added additional output fields to output structure

body.cen = cen;
body.nor = n;
body.area = area;
function body = hydrostatics_check(body)

% Required inputs

xbody = body.xbody;
vcg = body.vcg;
area = body.area;
n = body.nor;
cen = body.cen;

% Your code here to compute centroids, normals and areas of each panel
%----------------------------------------------------------------
Awp = sum(area.*n(:,3));
dispx = (-1)*sum(area.*cen(:,1).*n(:,1));
dispy = (-1)*sum(area.*cen(:,2).*n(:,2));
dispz = (-1)*sum(area.*(cen(:,3) + xbody(3)).*n(:,3));

xb = (-1/dispx)*sum(area.*n(:,3).*(cen(:,3) + xbody(3)).*cen(:,1));
yb = (-1/dispy)*sum(area.*n(:,3).*(cen(:,3) + xbody(3)).*cen(:,2));
zb = (-1/dispz)*sum(area.*n(:,3).*(cen(:,3) + xbody(3)).*((cen(:,3) - xbody(3))/2));
cob = [xb yb zb];

Ix = sum(area.*n(:,3).*cen(:,2).*cen(:,2));
GM = (Ix/dispz) + zb - vcg;
%----------------------------------------------------------------

% Added additional output fields to output structure

body.Awp = Awp;
body.cob = cob;
body.dispx = dispx;
body.dispy = dispy;
body.dispz = dispz;
body.GM = GM;

function body = weight_distribution(body)

rho = body.rho;
g = body.g;
Lpp = body.Lpp;
disp = body.dispz;

a = 0.2*Lpp;
b = 0.3045*Lpp;

wo = 2.8921e+06;
% Lonitudinal extent of the vessel

xmin = min(min(body.pan(1,:,:)));
xmax = max(max(body.pan(1,:,:)));

xdist = linspace(xmin,xmax,20);

% Your code here to compute wdist
%----------------------------------------------------------------

for i = 1:20
    if xdist(i) <= (xmin + a)
        wdist(i) = wo*(xdist(i) - xmin)/a;
    elseif xdist(i) >= (xmax - b) & xdist(i) <= xmax
        wdist(i) = -wo*(xdist(i) - xmax)/b;
    else
        wdist(i) = wo;
    end
end


%----------------------------------------------------------------

% Export outputs

body.xdist = xdist;
body.wdist = wdist;

function VBM = calculate_vbm_still(body)

% Constants

rho = body.rho;
g = body.g;

% Required Inputs

xbody = body.xbody;
xdist = body.xdist;
wdist = body.wdist;

pan_cen = body.cen;
pan_area = body.area;
pan_nz = body.nor(:,3);

% Global coordinates of the panel centroids

X = pan_cen(:,1) + xbody(1);
Z = pan_cen(:,3) + xbody(3);

% Longitudinal spacing at which VBM is evaluated

dxdist = mean(diff(xdist));

% Your code here
%--------------------------------------------------------------------
n = length(xdist);
temp = 0;

for j = 1:20
     for i = 1:body.npan
         if X(i) >= (xdist(j) - (dxdist/2)) & X(i) < (xdist(j) + (dxdist/2)) 
            temp = temp - rho*g*(pan_area(i).*pan_nz(i).*Z(i));
         end
     end
     
     if j == 1 | j == 20
         bdist(j) = 2*temp/dxdist;
     else
         bdist(j) = temp/dxdist;
     end
     temp = 0;

end

%--------------------------------------------------------------------

M = cumtrapz(wdist - bdist);
VBM = cumtrapz(xdist, cumtrapz(xdist,(wdist-bdist)));


